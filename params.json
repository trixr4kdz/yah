{
  "name": "Yah",
  "tagline": "A language for CMSI 488",
  "body": "# yah\r\n\r\n<img src=\"https://github.com/Tohoma/yah/blob/master/images/yahLogo.png\" width=\"200\"><br>\r\n<a href=\"https://travis-ci.org/Tohoma/yah?branch=master\"><img src=\"https://travis-ci.org/Tohoma/yah.svg?branch=master\" alt=\"Build Status\"></a>\r\n<a href='https://coveralls.io/github/Tohoma/yah?branch=master'><img src='https://coveralls.io/repos/github/Tohoma/yah/badge.svg?branch=master' alt='Coverage Status' /></a> \r\n<a href=\"https://david-dm.org/Tohoma/yah\"><img src=\"https://david-dm.org/Tohoma/yah.svg\"></a>\r\n\r\n\r\nA language for CMSI 488\r\n\r\nyah is a statically typed programming language with all of the dynamic benefits. It allows for versatile coding how you want, in the way that you you want. Prefer using `&&` instead of `and`? We got your back. Taking a dash of swift's type inference with optional explicit assignments, a sprinkle of Python's classes and scoping, a splash of CoffeeScript terseness, and compiling into Javascript gives you the glorious and infamous yah. yaaaaaaaaah.\r\n\r\n# List of Features\r\n\r\n* Type inference\r\n* First class functions\r\n* Optional / default parameters\r\n* String interpolation\r\n* List comprehension\r\n* No curly braces\r\n* Multi expression relational operations\r\n* Optional type specification\r\n* Multiple operation styles\r\n* Multi parameter relational operations\r\n\r\n# Grammar\r\n\r\n## Microsyntax\r\n\r\n```\r\nnewline      ::= \\s* (\\r*\\n)+\r\nletter       ::= [a-zA-z]\r\ndigit        ::= [0-9]\r\nkeyword      ::= 'class' | 'new' | 'for' | 'in' | 'while' \r\n             | 'and' | 'or' | 'is' | 'be' | 'if' | 'else' \r\n             | 'eq' | 'neq' | 'gt' | 'lt' | 'geq' | 'leq'\r\n             | 'not' | 'yah' | 'nah' |\r\n             | 'spit' | 'nil' | 'undefined' | 'NaN'\r\n             | 'int' | 'bool' | 'string' | 'float' | 'list'\r\n             | 'tuple' | 'dict' | 'Class'\r\nid           ::= (letter | '_') (letter | digit | '_')*\r\nintlit       ::= digit+\r\nfloatlit     ::= digit+ '.' digit+ ([Ee] [+-]? digit+)?\r\ndeclareop    ::= 'is'\r\nassignop     ::= 'be'\r\nboolop       ::= 'and' | 'or' | '&&' | '||'\r\nrelop        ::= '=='  | '<' | '>' | '>=' | '<='\r\naddop        ::= '+'   | '-'\r\nmulop        ::= '*'   | '/' | '%' | '^'\r\nprefixop     ::= '-'   | 'not' | '!'\r\nboollit      ::= 'yah' | 'nah' | 'true' | 'false'\r\nescape       ::= [\\\\] [rnst'\"\\\\]\r\nchar         ::= [^\\x00-\\x1F'\"\\\\] | escape\r\nstringlit    ::= ('\"' char* '\"') | (\\x27 char* \\x27)\r\nundeflit     ::= 'undefined'\r\nnanlit       ::= 'NaN'\r\nnillit       ::= 'nil'\r\ncomment      ::= '//' [^\\n]* newline\r\n             | '//\\' .*? '\\\\/'\r\n```\r\n\r\n## Macrosyntax\r\n\r\n```\r\nProgram       ::= Block\r\nBlock         ::= (Stmt newline)*\r\n\r\nStmt          ::= WhileStmt | ForStmt | ReturnStmt | Exp\r\n\r\nWhileStmt     ::= 'while' Exp ':' (newline Block | Exp)\r\nForStmt       ::= 'for' ('each')? id 'in' ListLit ':' (newline Block | Exp)\r\n              | 'times' int ':' (newline Block | Exp)\r\n\r\nReturnStmt    ::= ('return' | 'spit') Exp\r\n\r\nExp           ::= VarDeclare | VarAssign | VarExp | TernaryExp | FunExp | ConditionExp | ClassExp\r\n\r\nVarDeclare    ::= (id | TupLit) ('::' Type)? declareop Exp\r\n              | (id | TupLit) '::' Type\r\nVarAssign     ::= VarExp assignop Exp\r\nVarExp        ::= id ( '.' Exp8 | '[' Exp3 ']' | (Args ('.' Exp8 | '[' Exp3 ']')) )*\r\n\r\nType          ::= ('int' | 'string' | 'float' | 'bool' | 'list' | 'tuple' | 'dict') [?!]?\r\n\r\nFunBlock      ::= Exp | (newline Block)\r\nFunExp        ::= Args '(\\s)? ->' FunBlock\r\n\r\nConditionExp  ::= 'if' Exp0 ':' newline Block (('else if' | 'elif') Exp0 ':' newline Block)* ('else:' newline Block)?\r\n              | 'if' Exp0 ':' Exp\r\n\r\nClassExp      ::= 'Class ->' newline (Exp newline)*\r\n\r\nTernaryExp    ::= Exp0 ('if' Exp0 ( 'else' TernaryExp)?)? | Exp0 ('?' Exp0 ':' TernaryExp)?\r\nExp0          ::= Exp1 ('or' | '||' Exp1)*\r\nExp1          ::= Exp2 ('and' | '&&' Exp2)*\r\nExp2          ::= Exp3 (relop Exp3)?\r\nExp3          ::= Exp4 (('..' | '...') Exp4 ('by' Exp4)?)?\r\nExp4          ::= Exp5 (addop Exp4)*\r\nExp5          ::= Exp6 (mulop Exp5)*\r\nExp6          ::= prefixop? Exp7\r\nExp7          ::= Exp8 ('^' | '**' Exp8)?\r\nExp8          ::= Exp9 ('.' Exp9 | '[' Exp3 ']' | Args)*\r\nExp9          ::= intlit | floatlit | boollit | id | '(' Exp ')' | stringlit\r\n              | undeflit | nanlit | nillit | ListLit | TupLit | DictLit\r\n\r\nExpList       ::= newline? Exp (newline? ',' Exp)* newline?\r\n\r\nArgs          ::= '(' ExpList ')'\r\n\r\nListLit       ::= '[' ExpList | Comprehension ']'\r\nTupLit        ::= '(' ExpList ')'\r\nDictLit       ::= '{' BindList '}'\r\nBind          ::= newline? id ':' Exp newline?\r\nBindList      ::= Bind (',' Bind)*\r\n\r\nComprehension ::= TernaryExp 'for' ('each')? id 'in' Exp\r\n```\r\n\r\n# Features\r\n\r\n### Primitive and Reference types\r\nyah allows for many different ways to represent the same implementation. For instance, notice the two ways to describe 'undefined', 'nil', and 'NaN' below.\r\n\r\n```\r\na is 2                                                      var a = 2;\r\nb is \"what\"                                                 var b = \"what\";\r\nc is yah                                                    var c = true;\r\nd is nah                                                    var d = false;\r\n\r\ne is ͡° ͜ʖ ͡°                                               var e = undefined;  \r\nbanana is undefined                                         var banana = undefined;                                \r\nf is ಠ_ಠ                                                    var f = null;\r\napple is nil                                                var apple = null;\r\ng is :^)                                                    var g = NaN;\r\norange is NaN                                               var orange = NaN;\r\n\r\nh is [1,2,3,4,5] // Like Python, lists are mutable          var h = [1,2,3,4,5];\r\ni is (1,2,3,4,5) // Tuples are immutable                    var i = [1,2,3,4,5];\r\nj is {0:1, 2:3} // Dictionaries are mutable                 var j = {0:1, 2:3};\r\n\r\n\r\nh[0] be 6        // This would result in [6,2,3,4,5]        h[0] = 6;\r\ni[0] be 6        // This would cause a runtime error\r\nj[2] be 5        // This would result in {0:5, 2:3}         j[2] = 5;\r\n\r\n```\r\n\r\n### Assignment\r\nUnlike Javascript yah does not use var to declare assignments. yah uses type inference, however it also allows for explicit restrictions. yah also supports constants and, unlike javascript, you cannot edit the properties of an object constant. The keyword `swag` is placed before the variable declaration to indicate an object constant. Please see the code below for basic assignments, explicit restrictive assignments, and the use of object constants.\r\n\r\n```\r\n// Example of declaring and assigning to four variables\r\nx is 1                                                      var x = 1;\r\ny is 2 - x                                                  var y = 2 - x;\r\nz is 3 - y                                                  var z = 3 - y;\r\nu is 4 - z                                                  var u = 4 - z;\r\n\r\ndog::int is 5                                                var dog = 5;\r\ncat::string is \"furry\"                                       var cat = \"furry\";\r\ncat be 10                                                   // Produces a compile-time error\r\n\r\n// Example use of constants\r\nswag dog is 2                                              const dog = 2;\r\ndog be 3                                                   // Produces a compile-time error\r\n\r\n```\r\n### Strings\r\nyah supports string concatenation and borrows some elements from swift.\r\n\r\n```\r\nstringOne is \"sup\"                                          var stringOne = \"sup\";\r\nstringTwo is \"bruh\"                                         var stringTwo = \"bruh\";\r\nbanana is 10                                                var banana = 10;\r\n\r\nstringThree is \"sup \\(StringTwo)                            var stringThree = \"sup \" + \r\n    here's \\(banana) dollars\"                                   stringTwo + \" here's \" + \r\n                                                                banana + \" dollars\";\r\n                                                                \r\nprint stringThree                                          console.log(stringThree);       \r\n```\r\n\r\nThe following are some string operations.\r\n\r\n```\r\ngreeting is \"Hello \" + \"World\"                             var greeting = \"Hello \" + \"World\";\r\ngreeting.uppercase()                                       greeting.toUpperCase()\r\nprint \"Hello \" * 3                                         console.log(\"Hello Hello Hello \");\r\n\r\n\r\n```\r\n\r\n### If, Else and Conditional Statements\r\nIf and Else can be written without parantheses or curly braces. If statements can also use the reserved word then to allow for a one-liner statement.\r\n\r\n```\r\nif x === y && y === z and z === u:                          if (x === y && y === z && z === u) {\r\n    spit yah                                                    return true;\r\nelse:                                                       } else {\r\n    spit nah                                                    return false;\r\n                                                            }\r\n\r\n//Allows for both else if and elif\r\n\r\nif 5 > 10:                                                  if (5 > 10) {\r\n  print \"amazing\"                                             console.log(\"amazing\");\r\nelif 6 > 10:                                                else if (6 > 10) {\r\n  print \"still amazing\"                                       console.log(\"still amazing\");\r\nelse if 7 > 10:                                             else if (7 > 10) {\r\n  print \"still amazinger\"                                     console.log(\"still amazinger\");\r\nelse:                                                       } else {\r\n  print \"logical\"                                             console.log(\"logical\")\r\n                                                            }\r\n\r\n//one-liner\r\nspit yah if x == y                                          if (x === y) return true;\r\n\r\nx == y ? yah : nah                                          (x === y) ? true : false;\r\n\r\n```\r\n\r\n### Equivalency and other Relational operations\r\nEquivalency in yah takes the form of `eq var1, var2, ..., vari`. Other relational operations preform the same way. \r\nArguments are evaluated from left to right.\r\n\r\n```\r\nspit eq 2,2                                                 return 2 === 2;\r\n// returns yah\r\n\r\nspit (eq 1,2 )                                              return 1 === 2;\r\n// returns nah\r\n\r\nspit gt 10,11,12,1                                          return 10 > 11 && 11 > 12 && 12 > 1;\r\n\r\ntemp is 40                                                  var temp = 40;\r\nspit lt 10,12,temp,100                                      return 10 < 12 && 12 < temp && temp < 100;     \r\n\r\ngeq 11,2,1                                                  11 >= 2 && 2 >= 1;\r\nleq 12,1,0                                                  12 <= 1 && 1 <= 0;\r\n```\r\n\r\n### Loops and Iterations\r\nyah provides multiple ways to perform a set of statements multiple times. there is a for loop, for each, while, and the much simpler times operator.\r\n\r\n```\r\n//All three iterations will output the same values\r\n\r\nbasket is [\"banana\", \"orange\", \"grapefruit\"]                 var basket = [\"banana\", \"orange\", \"grapefruit\"];\r\n\r\nfor each fruit in basket:                                   for each (var fruit in basket) {\r\n  print \"stop eating my \\(fruit)\"                               console.log(\"stop eating my \" + fruit);\r\n                                                            }\r\n\r\nfor i in (0 .. basket.length):                              for (var i = 0; i < basket.length; i++) {\r\n  print \"stop eating my \\(basket[i])\"                           console.log(\"stop eating my \" + basket[i]);\r\n                                                            }\r\n\r\ntimes 3:                                                    for (var i = 0; i < 3; i++) {\r\n  print \"WAT\"                                                   console.log(\"WAT\");\r\n                                                            }\r\n\r\ntimes 3 suh:                                                for (var suh = 0; suh < 3; suh++) {\r\n  print \"stop eating my \\(basket[suh])\"                         console.log(\"stop eating my \" + basket[suh]);\r\n                                                            }\r\n```\r\n\r\n### Functions\r\nFunctions are defined by an optional list of parameters in parentheses, an arrow, and the function body.\r\n\r\n```\r\n// Declaring a function named printParam\r\nprintParam is (x) -> spit x                                 var printParam = function (x) {\r\n                                                                return x;\r\n                                                            }\r\n\r\nprint(printParam(\"Hello\"))                                  console.log(printParam(\"Hello\"));\r\n\r\n```\r\n\r\nFunctions may also have default values for arguments, for missing arguments.\r\n\r\n```\r\ncat is (weight, personality is \"cuddly\") ->                 var cat = function (weight, personality = \"cuddly\") {\r\n  spit \"Free cats available,                                    return \"Free cats available,\r\n      weighing \\{weight} pounds,                                weighing \" + weight + \" pounds,\r\n         with \\{personality} personalities\"                         with \" + personality + \" personalities\";\r\n                                                            }\r\n```\r\n#### Comments\r\nA single line comment is created with two foward slash characters. Multiline comments are started with two foward slashes followed by a backslash and ends with two back slashes followed by a single foward slash. \r\n\r\n```\r\n//This is a single line comment\r\n\r\n///\r\nThis is a \r\nmultiline comment\r\n\r\nStill multiline\r\n\r\nMultiline comment ends below. \r\n///\r\n\r\n```\r\n\r\n### List Operations\r\nYah supports list operations, such as list comprehension, and slices. Two dots for exclusive, three dots for inclusive.\r\n\r\n```\r\n\r\na is 0 .. 5    // [0,1,2,3,4]                             var a = [0, 1, 2, 3, 4];\r\nb is 0 ... 5   // [0,1,2,3,4,5]                           var b = [0, 1, 2, 3, 4, 5];\r\n\r\nc is 0 .. 4 by 2                                          var c = [];\r\n// [0,2]                                                  for (var i = 0; i < 4; i++) {\r\n                                                              if (i % 2 == 0) {\r\n                                                                  c.push(i);\r\n                                                              }\r\n                                                          }\r\n\r\nd is 0 ... 9 by 3                                         var d = [];\r\n// [0,3,6,9]                                              for (var i = 0;  i <= 9; i++) {\r\n                                                              if (i % 3 == 0) {\r\n                                                                  d.push(i);\r\n                                                              }\r\n                                                          }\r\n\r\ne is [x + 1 for x in 0 ... 9 by 3]                        var e = [];\r\n// [1, 4, 7, 10]                                          for (var i = 0; i <= 9; i++) {\r\n                                                              if (i % 3 == 0) {\r\n                                                                  e.push(i + 1);\r\n                                                              }\r\n                                                          }\r\n\r\nf is \"potato\"                                             var f = \"potato\";\r\ng is f[0 .. 3]                                            var g = [];\r\n                                                          for (var i = 0; i < 3; i++) {\r\n                                                              g.push(f[i]);\r\n                                                          }\r\n                                                          g = g.join('');\r\n\r\n```\r\n\r\n### Scoping\r\nScoping in yah is similar to python's LEGB rule.\r\nLocal -> Enclosed -> Global -> Built In\r\nyah first searches for a variable in the local namespace. If the variable cannot be found in the local namespace, yah continues the search in the namespace of the enclosing function. If not found in the enclosing function, or if there is no enclosing function, yah looks in the global namespace followed by the namespace of built in / reserved names.\r\n\r\nThe following code would output:\r\n5\r\n10\r\n10\r\n\r\n```\r\ni is 5                                                      var i = 5;\r\n\r\nbar is () ->                                                var bar = function () {\r\n    print i                                                     console.log(i);\r\n                                                            }\r\n\r\nfoo is () ->                                                var foo = function () {\r\n    i be 10                                                     i = 10;\r\n    print i                                                     console.log(i);\r\n                                                            }\r\n\r\nbar()                                                       bar();\r\nfoo()                                                       foo();\r\nprint i                                                     console.log(i);\r\n\r\n```\r\nyah allows for specifying the desired namespace using the keywords global and local. In the below example, the output would be:\r\n5\r\n7\r\n15\r\n\r\n```\r\ni is 5                                                      var i = 5;\r\n\r\napple is () ->                                              var apple = function () {\r\n    global i be 15                                                 i = 15;\r\n    local i is 7                                                   console.log(i);\r\n    print i                                                 }\r\n\r\nprint i                                                     console.log(i);\r\napple()                                                     apple();\r\nprint i                                                     console.log(i);\r\n\r\n```\r\n\r\n### Classes and Objects\r\nClasses and objects behave like dictionaries.\r\n```\r\nBanana is Class ->                                          class Banana {\r\n    color is yellow                                             constructor() {\r\n    size is small                                                   this.color = \"yellow\";\r\n                                                                    this.size = \"small\";\r\nb is new Banana()                                               }\r\nprint(b.color)                                              }\r\n                                                            var b = new Banana();\r\n                                                            console.log(b.color)\r\n\r\n\r\n```\r\n\r\n### Code examples\r\nPrime Function\r\n```\r\nprime is (n) ->                                             var prime = function (n) {\r\n    for i in (0...n/2):                                         for (var i = 0; i < n/2; i++) {\r\n        if eq n % i, 0:                                             if (n % i === 0) {\r\n            spit nah                                                    return false;\r\n        i++                                                         }\r\n    spit yah                                                    return true;\r\n                                                            }\r\n```\r\n\r\nCallback function usage\r\n```\r\nsample is (functionvar) ->                                  var sample = function (functionvar) {\r\n  functionvar(\"dog\")                                            functionvar(\"dog\");\r\n                                                            }\r\n\r\nsample((x) -> print(x))                                     sample(function (x) {\r\n// The output would be \"dog\"                                    console.log(x);\r\n                                                            });\r\n\r\n```\r\n\r\nCollatz\r\n```                                                 \r\ncollatz is (n, count is 0) ->                               var collatz = function (n, count  = 0) {\r\n  if eq n,1:                                                    if (n === 1) {\r\n    spit count                                                      return count;\r\n  else:                                                         } else {\r\n    spit collatz((eq n % 2, 0 ? n / 2 : 3 * n + 1),                 return collatz(n % 2 === 0 ? n / 2 : \r\n      count++)                                                      3 * n + 1, count+=1);\r\n                                                                }\r\n                                                            }\r\n```",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}